{
  "address": "0x4E193d8de2e794b244B85Df6c5d2434A2f42B2EE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rolesContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Proposal.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "ProposalEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "choiceIndex",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "VotingStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_choicesContent",
          "type": "string[]"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        }
      ],
      "name": "endVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        }
      ],
      "name": "getProposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        }
      ],
      "name": "getProposalDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "votes",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Proposal.Choice[]",
              "name": "choices",
              "type": "tuple[]"
            },
            {
              "internalType": "enum Proposal.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "votingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingEndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proposal.ProposalPresnter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "votes",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Proposal.Choice[]",
              "name": "choices",
              "type": "tuple[]"
            },
            {
              "internalType": "enum Proposal.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "votingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingEndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proposal.ProposalPresnter[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        }
      ],
      "name": "hasUserVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingEndTime",
          "type": "uint256"
        }
      ],
      "name": "startVotingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "startVotingTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clubId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choiceIndex",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf5f512ff045120517864a9c9e54c05308d2c6d7f7aca5a0ef9d1a0c0551dda8",
  "receipt": {
    "to": null,
    "from": "0x40310f844bFA971bdFD3Fa9D2D73E1B7e1F5B879",
    "contractAddress": "0x4E193d8de2e794b244B85Df6c5d2434A2f42B2EE",
    "transactionIndex": 141,
    "gasUsed": "2430275",
    "logsBloom": "0x
    "blockHash": "0xec7e8370d7afd613086355e6fe70b36dac700b3c589261edf76a6b005c89de48",
    "transactionHash": "0xbf5f512ff045120517864a9c9e54c05308d2c6d7f7aca5a0ef9d1a0c0551dda8",
    "logs": [],
    "blockNumber": 6003201,
    "cumulativeGasUsed": "15550741",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB690155751f50E6edbA8AEAE0b10C3350487cFEf",
    "0x344A40a76Df40583e649592F75ED0232a8379af4"
  ],
  "numDeployments": 1,
  "solcInputHash": "5119cc793b526fa3851c92c0955b0649",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rolesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Proposal.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ProposalEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choiceIndex\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_choicesContent\",\"type\":\"string[]\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"}],\"name\":\"endVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"}],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"}],\"name\":\"getProposalDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"votes\",\"type\":\"uint8\"}],\"internalType\":\"struct Proposal.Choice[]\",\"name\":\"choices\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Proposal.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"votingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal.ProposalPresnter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"votes\",\"type\":\"uint8\"}],\"internalType\":\"struct Proposal.Choice[]\",\"name\":\"choices\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Proposal.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"votingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal.ProposalPresnter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"}],\"name\":\"hasUserVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEndTime\",\"type\":\"uint256\"}],\"name\":\"startVotingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"startVotingTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choiceIndex\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Proposal.sol\":\"Proposal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Club.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./IClub.sol\\\";\\r\\nimport \\\"./membership/MemberManager.sol\\\";\\r\\nimport \\\"./membership/MemberRecord.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Club is IClub {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\tCounters.Counter private _clubIds;\\r\\n\\r\\n\\tusing MemberManager for MemberManager.MemberData;\\r\\n\\tMemberManager.MemberData private _members;\\r\\n\\tMemberManager.MemberData private _membershipRequests;\\r\\n\\r\\n\\taddress private immutable _roles;\\r\\n\\r\\n\\tmapping(address => uint256) public csToClub;\\r\\n\\r\\n\\tevent MembershipRequested(address indexed user, uint256 indexed clubId);\\r\\n\\tevent MembershipApproved(address indexed user, uint256 indexed clubId);\\r\\n\\tevent MembershipRejected(address indexed user, uint256 indexed clubId);\\r\\n\\r\\n\\tstruct ClubDetails {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tstring name;\\r\\n\\t\\taddress creator;\\r\\n\\t\\tuint256 createdOn;\\r\\n\\t}\\r\\n\\r\\n\\tstruct CsRolePresenter {\\r\\n\\t\\tuint256 clubId;\\r\\n\\t\\tstring clubName;\\r\\n\\t\\taddress cs;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ClubPresenter {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tstring name;\\r\\n\\t\\taddress creator;\\r\\n\\t\\tuint256 createdOn;\\r\\n\\t\\tuint256 joinedOn;\\r\\n\\t\\tuint256 membershipRequestedOn;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(uint256 => ClubDetails) public _clubs;\\r\\n\\tevent ClubCreated(uint256 clubId, string name, address moderator);\\r\\n\\tevent JoinedClub(address user, uint256 clubId);\\r\\n\\tevent LeftClub(address user, uint256 clubId);\\r\\n\\r\\n\\tconstructor(address rolesContract) {\\r\\n\\t\\t_roles = rolesContract;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyMember(uint256 clubId) {\\r\\n\\t\\trequire(_members.isMember(_msgSender(), clubId), \\\"Caller is not a member\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAdminOrModerator() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIRoles(_roles).isAdminOrModerator(_msgSender()),\\r\\n\\t\\t\\t\\\"Roles: caller is not admin or moderator\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyCsRole(uint256 clubId) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIRoles(_roles).isAdminOrModerator(_msgSender()) ||\\r\\n\\t\\t\\tIRoles(_roles).isCSOn(_msgSender(), clubId),\\r\\n\\t\\t\\t\\\"Roles: caller is not a staff\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyNoStaffPrivileges() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!IRoles(_roles).isStaff(_msgSender()),\\r\\n\\t\\t\\t\\\"Roles: caller must not be a staff\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMemberID(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (uint256) {\\r\\n\\t\\treturn _members.getMemberID(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembershipRequestID(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (uint256) {\\r\\n\\t\\treturn _membershipRequests.getMemberID(user, clubId);\\r\\n\\t}\\r\\n\\t\\tfunction getMember(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (MemberRecord memory) {\\r\\n\\t\\treturn _members.getMember(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembershipRequest(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (MemberRecord memory) {\\r\\n\\t\\treturn _membershipRequests.getMember(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isMember(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (bool) {\\r\\n\\t\\trequire(user != address(0), \\\"Invalid address\\\");\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\treturn _members.isMember(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgSender() internal view returns (address) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isValidClubId(uint256 clubId) external view returns (bool) {\\r\\n\\t\\treturn clubId >= 0 && clubId <= _clubIds.current();\\r\\n\\t}\\r\\n\\r\\n\\tfunction createClub(string memory name) external onlyAdminOrModerator {\\r\\n\\t\\tuint size = getStringLength(name);\\r\\n\\t\\trequire(size > 3 && 44 > size, \\\"Invalid club name\\\");\\r\\n\\t\\tuint256 clubId = _clubIds.current();\\r\\n\\t\\t_clubIds.increment();\\r\\n\\r\\n\\t\\t_clubs[clubId] = ClubDetails(\\r\\n\\t\\t\\tclubId,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t\\temit ClubCreated(clubId, name, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction joinClub(uint256 clubId) external onlyNoStaffPrivileges {\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(getMemberID(_msgSender(), clubId) == 0, \\\"User already a member\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tgetMembershipRequestID(_msgSender(), clubId) == 0,\\r\\n\\t\\t\\t\\\"Membership request already submitted\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_membershipRequests.grantMembership(_msgSender(), clubId);\\r\\n\\r\\n\\t\\temit MembershipRequested(_msgSender(), clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction approveMembership(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external onlyCsRole(clubId) {\\r\\n\\t\\trequire(user != address(0), \\\"Invalid address\\\");\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tgetMembershipRequestID(user, clubId) > 0,\\r\\n\\t\\t\\t\\\"User has not requested membership\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tgetMemberID(user, clubId) == 0,\\r\\n\\t\\t\\t\\\"User is already a member in the club\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_members.grantMembership(user, clubId);\\r\\n\\t\\t_membershipRequests.revokeMembership(user, clubId);\\r\\n\\r\\n\\t\\temit MembershipApproved(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction rejectMembership(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external onlyCsRole(clubId) {\\r\\n\\t\\trequire(user != address(0), \\\"Invalid address\\\");\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tgetMembershipRequestID(user, clubId) > 0,\\r\\n\\t\\t\\t\\\"User has not requested membership\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_membershipRequests.revokeMembership(user, clubId);\\r\\n\\t\\temit MembershipRejected(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeMembership(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external onlyCsRole(clubId) {\\r\\n\\t\\trequire(user != address(0), \\\"Invalid address\\\");\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(_members.getMemberID(user, clubId) > 0, \\\"User is not member in the club\\\");\\r\\n\\r\\n\\t\\t_members.revokeMembership(user, clubId);\\r\\n\\t\\temit MembershipRejected(user, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getClubDetails(\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (ClubPresenter memory) {\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\tClubDetails memory club = _clubs[clubId];\\r\\n\\t\\taddress user = _msgSender();\\r\\n\\t\\tMemberRecord memory memberJoinedOn = getMember(user, club.id);\\r\\n\\t\\tMemberRecord memory membershipRequestedAt = getMembershipRequest(user, club.id);\\r\\n\\t\\treturn\\r\\n\\t\\t\\tClubPresenter({\\r\\n\\t\\t\\t\\tid: club.id,\\r\\n\\t\\t\\t\\tname: club.name,\\r\\n\\t\\t\\t\\tcreator: club.creator,\\r\\n\\t\\t\\t\\tcreatedOn: club.createdOn,\\r\\n\\t\\t\\t\\tjoinedOn: memberJoinedOn.ceatedAt,\\r\\n\\t\\t\\t\\tmembershipRequestedOn: membershipRequestedAt.ceatedAt\\r\\n\\t\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasRequestedMembership(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view onlyCsRole(clubId) returns (bool) {\\r\\n\\t\\trequire(user != address(0), \\\"Invalid address\\\");\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\treturn getMembershipRequestID(user, clubId) > 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction didIRequestedMembership(\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (bool) {\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\treturn getMembershipRequestID(_msgSender(), clubId) > 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getClubCreator(\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view onlyAdminOrModerator returns (address) {\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\treturn _clubs[clubId].creator;\\r\\n\\t}\\r\\n\\r\\n\\tfunction leaveClub(uint256 clubId) external {\\r\\n\\t\\trequire(clubId <= _clubIds.current(), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tgetMemberID(_msgSender(), clubId) > 0,\\r\\n\\t\\t\\t\\\"User is not member in the club\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_members.revokeMembership(_msgSender(), clubId);\\r\\n\\r\\n\\t\\temit LeftClub(_msgSender(), clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPageMemberCursor(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize,\\r\\n\\t\\tuint256 length\\r\\n\\t) internal pure returns (uint256, uint256) {\\r\\n\\t\\tif (length < 1) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 totalPages = length / pageSize;\\r\\n\\t\\tif (length % pageSize != 0) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++totalPages;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (page > totalPages) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 startItemIndex;\\r\\n\\t\\tuint256 endItemIndex;\\r\\n\\r\\n\\t\\tif (((page - 1) * pageSize) < length) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\tstartItemIndex = length - ((page - 1) * pageSize);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstartItemIndex = length;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (startItemIndex > pageSize) {\\r\\n\\t\\t\\tendItemIndex = startItemIndex - pageSize;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (startItemIndex, endItemIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPageCursor(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize,\\r\\n\\t\\tuint256 length\\r\\n\\t) internal pure returns (uint256, uint256) {\\r\\n\\t\\tif (length == 0) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 totalPages = length / pageSize;\\r\\n\\t\\tif (length % pageSize != 0) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++totalPages;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (page > totalPages) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 startItemIndex;\\r\\n\\t\\tuint256 endItemIndex;\\r\\n\\r\\n\\t\\tif (((page - 1) * pageSize) < length) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\tstartItemIndex = length - ((page - 1) * pageSize);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstartItemIndex = length;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (startItemIndex > pageSize) {\\r\\n\\t\\t\\tendItemIndex = startItemIndex - pageSize;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (startItemIndex, endItemIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembers(\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) external view returns (MemberRecord[] memory) {\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageMemberCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\t_members.current(clubId)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 itemCount = startItemIndex - endItemIndex;\\r\\n\\t\\tif (itemCount < 1) {\\r\\n\\t\\t\\treturn new MemberRecord[](0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tMemberRecord[] memory pageClubs = new MemberRecord[](itemCount);\\r\\n\\t\\tuint256 j = itemCount - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tpageClubs[j] = _members.getMemberByIndex(i, clubId);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn pageClubs;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getMembershipRequestsCount(\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn _membershipRequests.current(clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembersCount(\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn _members.current(clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembershipRequests(\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) external view returns (MemberRecord[] memory) {\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageMemberCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\t_membershipRequests.current(clubId)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 itemCount = startItemIndex - endItemIndex;\\r\\n\\t\\tif (itemCount < 1) {\\r\\n\\t\\t\\treturn new MemberRecord[](0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tMemberRecord[] memory pageClubs = new MemberRecord[](itemCount);\\r\\n\\t\\tuint256 j = itemCount - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tpageClubs[j] = _membershipRequests.getMemberByIndex(i, clubId);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn pageClubs;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCsRoles(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) external view returns (CsRolePresenter[] memory) {\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\t_clubIds.current()\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 itemCount = startItemIndex - endItemIndex;\\r\\n\\t\\tif (itemCount < 1) {\\r\\n\\t\\t\\treturn new CsRolePresenter[](0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tCsRolePresenter[] memory pageClubs = new CsRolePresenter[](itemCount);\\r\\n\\t\\tuint256 j = itemCount - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tClubDetails memory club = _clubs[i];\\r\\n\\r\\n\\t\\t\\tpageClubs[j] = CsRolePresenter({\\r\\n\\t\\t\\t\\tclubId: club.id,\\r\\n\\t\\t\\t\\tclubName: club.name,\\r\\n\\t\\t\\t\\tcs: IRoles(_roles).getCsRole(club.id)\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn pageClubs;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getClubs(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) external view returns (ClubPresenter[] memory) {\\r\\n\\t\\trequire(pageSize > 0 && pageSize <= 100, \\\"Invalid page size number!\\\");\\r\\n\\t\\trequire(page > 0 , \\\"Invalid page number!\\\");\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\t_clubIds.current()\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 itemCount = startItemIndex - endItemIndex;\\r\\n\\t\\tif (itemCount < 1) {\\r\\n\\t\\t\\treturn new ClubPresenter[](0);\\r\\n\\t\\t}\\r\\n\\t\\taddress user = _msgSender();\\r\\n\\r\\n\\t\\tClubPresenter[] memory pageClubs = new ClubPresenter[](itemCount);\\r\\n\\t\\tuint256 j = itemCount - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tClubDetails memory club = _clubs[i];\\r\\n\\t\\t\\tuint256 memberJoinedOn = getMemberID(user, club.id);\\r\\n\\t\\t\\tuint256 membershipRequestedAt = getMembershipRequestID(\\r\\n\\t\\t\\t\\tuser,\\r\\n\\t\\t\\t\\tclub.id\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tpageClubs[j] = ClubPresenter({\\r\\n\\t\\t\\t\\tid: club.id,\\r\\n\\t\\t\\t\\tname: club.name,\\r\\n\\t\\t\\t\\tcreator: club.creator,\\r\\n\\t\\t\\t\\tcreatedOn: club.createdOn,\\r\\n\\t\\t\\t\\tjoinedOn: memberJoinedOn,\\r\\n\\t\\t\\t\\tmembershipRequestedOn: membershipRequestedAt\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn pageClubs;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getStringLength(string memory _str) internal pure returns (uint) {\\r\\n\\t\\tbytes memory strBytes = bytes(_str);\\r\\n\\t\\treturn strBytes.length;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x92011d66b9efaf71f1ee1b69ae169ea9c744558b386d9ee1c1d48f7a2e55be41\",\"license\":\"MIT\"},\"contracts/IClub.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IClub {\\r\\n\\tfunction isMember(\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (bool);\\r\\n\\r\\n\\tfunction isValidClubId(uint256 clubId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2499a5b4da5fbd2fa8c078756ea9ab08c8ddc6323a8f595b10522e4bbfa9d97c\",\"license\":\"UNLICENSED\"},\"contracts/IRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./IRoles.sol\\\";\\r\\n\\r\\ninterface IRoles {\\r\\n\\r\\n    function isAdminOrModerator(address account) external view returns (bool);\\r\\n\\r\\n    function isStaff(address account) external view returns (bool);\\r\\n\\r\\n    function isCS(address account) external view returns (bool);\\r\\n    \\r\\n    function isCSOn(address account, uint256 clubId) external view returns (bool);\\r\\n\\r\\n    function isModerator(address account) external view returns (bool);\\r\\n\\r\\n    function isAdmin(address account) external view returns (bool);\\r\\n\\r\\n    function isFan(address account) external view returns (bool);\\r\\n\\r\\n    function getCsRole(uint256 clubId) external view returns (address);\\r\\n}\",\"keccak256\":\"0x13c04850fb1968f5f305cb319bfc4bf307e7196b1152e8121ed97a2197591622\",\"license\":\"MIT\"},\"contracts/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./IRoles.sol\\\";\\r\\nimport \\\"./Club.sol\\\";\\r\\nimport \\\"./IClub.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Proposal {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\tenum Status {\\r\\n\\t\\tScheduled,\\r\\n\\t\\tPending,\\r\\n\\t\\tActive,\\r\\n\\t\\tPassed,\\r\\n\\t\\tRejected\\r\\n\\t}\\r\\n\\r\\n\\taddress private immutable _roles;\\r\\n\\taddress private immutable _clubs;\\r\\n\\r\\n\\tstruct Choice {\\r\\n\\t\\tstring description;\\r\\n\\t\\tuint8 votes;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ProposalRecord {\\r\\n\\t\\taddress creator;\\r\\n\\t\\tstring title;\\r\\n\\t\\tstring description;\\r\\n\\t\\tChoice[] choices;\\r\\n\\t\\tStatus status;\\r\\n\\t\\tuint256 votingStartTime;\\r\\n\\t\\tuint256 votingEndTime;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ProposalPresnter {\\r\\n\\t\\tuint256 proposalId;\\r\\n\\t\\taddress creator;\\r\\n\\t\\tstring title;\\r\\n\\t\\tstring description;\\r\\n\\t\\tChoice[] choices;\\r\\n\\t\\tStatus status;\\r\\n\\t\\tuint256 votingStartTime;\\r\\n\\t\\tuint256 votingEndTime;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(address => mapping(uint256 => mapping(uint256 => uint256)))\\r\\n\\t\\tprivate hasVoted;\\r\\n\\tmapping(uint256 => mapping(uint256 => ProposalRecord)) private _proposals;\\r\\n\\tmapping(uint256 => Counters.Counter) private _proposalIds;\\r\\n\\r\\n\\tevent ProposalCreated(uint256 id, uint256 clubId, address creator);\\r\\n\\tevent VotingStarted(uint256 proposalId, uint256 startTime, uint256 endTime);\\r\\n\\tevent ProposalEnded(uint256 proposalId, Status status, uint256 endTime);\\r\\n\\tevent Voted(uint256 proposalId, address voter, uint256 choiceIndex);\\r\\n\\r\\n\\tconstructor(address rolesContract, address clubAddress) {\\r\\n\\t\\t_roles = rolesContract;\\r\\n\\t\\t_clubs = clubAddress;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAdminOrModerator() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIRoles(_roles).isAdminOrModerator(_msgSender()),\\r\\n\\t\\t\\t\\\"Roles: caller is not admin or moderator\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgSender() internal view returns (address) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction createProposal(\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tstring memory _title,\\r\\n\\t\\tstring memory _description,\\r\\n\\t\\tstring[] memory _choicesContent\\r\\n\\t) external onlyAdminOrModerator {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_choicesContent.length > 1 && _choicesContent.length <= 10,\\r\\n\\t\\t\\t\\\"Invalid number of choices\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 proposalId = _proposalIds[clubId].current();\\r\\n\\t\\t_proposalIds[clubId].increment();\\r\\n\\r\\n\\t\\tProposalRecord storage newProposal = _proposals[clubId][proposalId];\\r\\n\\t\\tnewProposal.creator = _msgSender();\\r\\n\\t\\tnewProposal.title = _title;\\r\\n\\t\\tnewProposal.description = _description;\\r\\n\\t\\tnewProposal.status = Status.Pending;\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _choicesContent.length; ) {\\r\\n\\t\\t\\tnewProposal.choices.push(Choice(_choicesContent[i], 0));\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit ProposalCreated(proposalId, clubId, newProposal.creator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isActive(\\r\\n\\t\\tProposalRecord memory proposal\\r\\n\\t) internal view returns (bool) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\tproposal.status == Status.Active &&\\r\\n\\t\\t\\tblock.timestamp >= proposal.votingStartTime &&\\r\\n\\t\\t\\tblock.timestamp < proposal.votingEndTime;\\r\\n\\t}\\r\\n\\r\\n\\tfunction canVote(\\r\\n\\t\\taddress account,\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (bool) {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId <= _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tProposalRecord memory proposal = _proposals[clubId][proposalId];\\r\\n\\t\\trequire(isActive(proposal), \\\"Proposal is not active for voting!\\\");\\r\\n\\r\\n\\t\\treturn IClub(_clubs).isMember(account, clubId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getProposalCount(uint256 clubId) external view returns (uint256) {\\r\\n\\t\\treturn _proposalIds[clubId].current();\\r\\n\\t}\\r\\n\\r\\n\\tfunction startVotingTimer(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 duration\\r\\n\\t) external onlyAdminOrModerator {\\r\\n\\t\\trequire(duration > 500, \\\"Duration must be positive\\\");\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId <= _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\t\\tProposalRecord storage proposal = _proposals[clubId][proposalId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposal.status == Status.Pending,\\r\\n\\t\\t\\t\\\"Proposal not in pending state\\\"\\r\\n\\t\\t);\\r\\n\\t\\tproposal.status = Status.Active;\\r\\n\\t\\tproposal.votingStartTime = block.timestamp;\\r\\n\\t\\tuint256 newDuration;\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tnewDuration = block.timestamp + duration;\\r\\n\\t\\t}\\r\\n\\t\\tproposal.votingEndTime = newDuration;\\r\\n\\t\\temit VotingStarted(\\r\\n\\t\\t\\tproposalId,\\r\\n\\t\\t\\tproposal.votingStartTime,\\r\\n\\t\\t\\tproposal.votingEndTime\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction startVotingSchedule(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 _votingStartTime,\\r\\n\\t\\tuint256 _votingEndTime\\r\\n\\t) external onlyAdminOrModerator {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId < _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_votingStartTime >= block.timestamp,\\r\\n\\t\\t\\t\\\"Start time must be in the future\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_votingEndTime > _votingStartTime,\\r\\n\\t\\t\\t\\\"End time must be after start time\\\"\\r\\n\\t\\t);\\r\\n\\t\\tProposalRecord storage proposal = _proposals[clubId][proposalId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposal.status == Status.Pending,\\r\\n\\t\\t\\t\\\"Proposal not in pending state\\\"\\r\\n\\t\\t);\\r\\n\\t\\tproposal.status = Status.Active;\\r\\n\\t\\tproposal.votingStartTime = _votingStartTime;\\r\\n\\t\\tproposal.votingEndTime = _votingEndTime;\\r\\n\\r\\n\\t\\temit VotingStarted(\\r\\n\\t\\t\\tproposalId,\\r\\n\\t\\t\\tproposal.votingStartTime,\\r\\n\\t\\t\\tproposal.votingEndTime\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasUserVoted(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (bool) {\\r\\n\\t\\treturn hasVoted[msg.sender][clubId][proposalId] == 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction vote(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 choiceIndex\\r\\n\\t) external {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId < _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\t\\tProposalRecord storage proposal = _proposals[clubId][proposalId];\\r\\n\\t\\trequire(isActive(proposal), \\\"Proposal is not active for voting!\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIClub(_clubs).isMember(msg.sender, clubId),\\r\\n\\t\\t\\t\\\"Not a member of this club\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasVoted[msg.sender][clubId][proposalId] == 0,\\r\\n\\t\\t\\t\\\"Already voted on this proposal\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tproposal.choices[choiceIndex].votes++;\\r\\n\\t\\t}\\r\\n\\t\\thasVoted[msg.sender][clubId][proposalId] = block.timestamp;\\r\\n\\r\\n\\t\\temit Voted(proposalId, msg.sender, choiceIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction endVoting(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external onlyAdminOrModerator {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId < _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\t\\tProposalRecord storage proposal = _proposals[clubId][proposalId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposal.status == Status.Active,\\r\\n\\t\\t\\t\\\"Proposal not in voting state\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 winningChoiceIndex;\\r\\n\\t\\tfor (uint256 i = 1; i < proposal.choices.length; ) {\\r\\n\\t\\t\\tif (\\r\\n\\t\\t\\t\\tproposal.choices[i].votes >\\r\\n\\t\\t\\t\\tproposal.choices[winningChoiceIndex].votes\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\twinningChoiceIndex = i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tproposal.status = winningChoiceIndex > 0\\r\\n\\t\\t\\t? Status.Passed\\r\\n\\t\\t\\t: Status.Rejected;\\r\\n\\r\\n\\t\\temit ProposalEnded(proposalId, proposal.status, block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPageCursor(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (uint256, uint256) {\\r\\n\\t\\tuint256 length = _proposalIds[clubId].current();\\r\\n\\t\\tif (length == 0) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 totalPages = length / pageSize;\\r\\n\\t\\tif (length % pageSize != 0) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++totalPages;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (page > totalPages) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 startItemIndex;\\r\\n\\t\\tuint256 endItemIndex;\\r\\n\\r\\n\\t\\tif (((page - 1) * pageSize) < length) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\tstartItemIndex = length - ((page - 1) * pageSize);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstartItemIndex = length;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (startItemIndex > pageSize) {\\r\\n\\t\\t\\tendItemIndex = startItemIndex - pageSize;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (startItemIndex, endItemIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getProposals(\\r\\n\\t\\tuint256 clubId,\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) external view returns (ProposalPresnter[] memory) {\\r\\n\\t\\trequire(pageSize > 0 && pageSize <= 100, \\\"Invalid page size number!\\\");\\r\\n\\t\\trequire(page > 0, \\\"Invalid page number!\\\");\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\tclubId\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 itemCount = startItemIndex - endItemIndex;\\r\\n\\r\\n\\t\\tif (itemCount < 1) {\\r\\n\\t\\t\\treturn new ProposalPresnter[](0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tProposalPresnter[] memory pageProposals = new ProposalPresnter[](\\r\\n\\t\\t\\titemCount\\r\\n\\t\\t);\\r\\n\\t\\tuint256 j = itemCount - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tProposalRecord memory proposal = _proposals[clubId][i];\\r\\n\\t\\t\\tStatus status = proposal.status;\\r\\n\\r\\n\\t\\t\\tif (block.timestamp < proposal.votingStartTime) {\\r\\n\\t\\t\\t\\tstatus = Status.Scheduled;\\r\\n\\t\\t\\t} else if (\\r\\n\\t\\t\\t\\tblock.timestamp >= proposal.votingStartTime &&\\r\\n\\t\\t\\t\\tblock.timestamp < proposal.votingEndTime &&\\r\\n\\t\\t\\t\\tstatus == Status.Pending\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tstatus = Status.Active;\\r\\n\\t\\t\\t} else if (\\r\\n\\t\\t\\t\\tblock.timestamp > proposal.votingEndTime &&\\r\\n\\t\\t\\t\\tstatus == Status.Active\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tstatus = Status.Passed;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tpageProposals[j] = ProposalPresnter({\\r\\n\\t\\t\\t\\tcreator: proposal.creator,\\r\\n\\t\\t\\t\\ttitle: proposal.title,\\r\\n\\t\\t\\t\\tdescription: proposal.description,\\r\\n\\t\\t\\t\\tchoices: proposal.choices,\\r\\n\\t\\t\\t\\tstatus: status,\\r\\n\\t\\t\\t\\tvotingStartTime: proposal.votingStartTime,\\r\\n\\t\\t\\t\\tvotingEndTime: proposal.votingEndTime,\\r\\n\\t\\t\\t\\tproposalId: i\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn pageProposals;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getProposalDetails(\\r\\n\\t\\tuint256 proposalId,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) external view returns (ProposalPresnter memory) {\\r\\n\\t\\trequire(IClub(_clubs).isValidClubId(clubId), \\\"Invalid club ID\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tproposalId < _proposalIds[clubId].current(),\\r\\n\\t\\t\\t\\\"Invalid proposal ID\\\"\\r\\n\\t\\t);\\r\\n\\t\\tProposalRecord memory proposal = _proposals[clubId][proposalId];\\r\\n\\t\\tStatus status = proposal.status;\\r\\n\\r\\n\\t\\tif (block.timestamp < proposal.votingStartTime) {\\r\\n\\t\\t\\tstatus = Status.Scheduled;\\r\\n\\t\\t} else if (\\r\\n\\t\\t\\tblock.timestamp >= proposal.votingStartTime &&\\r\\n\\t\\t\\tblock.timestamp < proposal.votingEndTime &&\\r\\n\\t\\t\\tstatus == Status.Pending\\r\\n\\t\\t) {\\r\\n\\t\\t\\tstatus = Status.Active;\\r\\n\\t\\t} else if (\\r\\n\\t\\t\\tblock.timestamp > proposal.votingEndTime && status == Status.Active\\r\\n\\t\\t) {\\r\\n\\t\\t\\tstatus = Status.Passed;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn\\r\\n\\t\\t\\tProposalPresnter({\\r\\n\\t\\t\\t\\tcreator: proposal.creator,\\r\\n\\t\\t\\t\\ttitle: proposal.title,\\r\\n\\t\\t\\t\\tdescription: proposal.description,\\r\\n\\t\\t\\t\\tchoices: proposal.choices,\\r\\n\\t\\t\\t\\tstatus: status,\\r\\n\\t\\t\\t\\tvotingStartTime: proposal.votingStartTime,\\r\\n\\t\\t\\t\\tvotingEndTime: proposal.votingEndTime,\\r\\n\\t\\t\\t\\tproposalId: proposalId\\r\\n\\t\\t\\t});\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x6dec64db78a764cac0876625d9ace32424aebe25fca0ea191b8aef2ee38ff0da\",\"license\":\"MIT\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"./IRoles.sol\\\";\\r\\n\\r\\ncontract Roles is IRoles, AccessControlEnumerable {\\r\\n\\tbytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\tbytes32 private constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\r\\n\\tbytes32 private constant FAN_ROLE = keccak256(\\\"FAN_ROLE\\\");\\r\\n\\tbytes32 private constant CS_ROLE = keccak256(\\\"CS_ROLE\\\");\\r\\n\\tmapping(uint256 => address) private clubIdToCs;\\r\\n\\r\\n\\taddress private immutable owner;\\r\\n\\r\\n\\tevent ModeratorRoleGranted(address indexed account);\\r\\n\\tevent ModeratorRoleRevoked(address indexed account);\\r\\n\\r\\n\\tevent AdminRoleGranted(address indexed account);\\r\\n\\tevent AdminRoleRevoked(address indexed account);\\r\\n\\r\\n\\tevent CSRoleGranted(address indexed account);\\r\\n\\tevent CSRoleRevoked(address indexed account);\\r\\n\\r\\n\\tconstructor(address _owner) {\\r\\n\\t\\t_setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\r\\n\\t\\t_setRoleAdmin(MODERATOR_ROLE, ADMIN_ROLE);\\r\\n\\t\\t_setRoleAdmin(FAN_ROLE, ADMIN_ROLE);\\r\\n\\t\\t_setRoleAdmin(CS_ROLE, MODERATOR_ROLE);\\r\\n\\t\\t_setRoleAdmin(CS_ROLE, ADMIN_ROLE);\\r\\n\\t\\t_setRoleAdmin(FAN_ROLE, CS_ROLE);\\r\\n\\r\\n\\t\\t_setupRole(ADMIN_ROLE, _owner);\\r\\n\\t\\towner = _owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCsRole(uint256 clubId) external view returns (address) {\\r\\n\\t\\treturn clubIdToCs[clubId];\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAdmin() {\\r\\n\\t\\trequire(hasRole(ADMIN_ROLE, _msgSender()), \\\"Caller is not an admin\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyCS(uint256 clubId) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(CS_ROLE, _msgSender()) && clubIdToCs[clubId] == _msgSender(),\\r\\n\\t\\t\\t\\\"Caller is not a CS for any club\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAdminOrModerator() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(ADMIN_ROLE, _msgSender()) ||\\r\\n\\t\\t\\t\\thasRole(MODERATOR_ROLE, _msgSender()),\\r\\n\\t\\t\\t\\\"Caller is not admin or moderator\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyModerator() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(MODERATOR_ROLE, _msgSender()),\\r\\n\\t\\t\\t\\\"Caller is not a moderator for this club\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyFan() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(FAN_ROLE, _msgSender()),\\r\\n\\t\\t\\t\\\"Caller is not a fan of any club\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction grantModeratorRole(address account) public onlyAdminOrModerator() {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!hasRole(MODERATOR_ROLE, account),\\r\\n\\t\\t\\t\\\"User is already a moderator\\\"\\r\\n\\t\\t);\\r\\n\\t\\tgrantRole(MODERATOR_ROLE, account);\\r\\n\\t\\temit ModeratorRoleGranted(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRole(address account) external view returns (string memory) {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\tif (hasRole(ADMIN_ROLE, account)) {\\r\\n\\t\\t\\treturn \\\"ADMIN\\\";\\r\\n\\t\\t} else if (hasRole(MODERATOR_ROLE, account)) {\\r\\n\\t\\t\\treturn \\\"MODERATOR\\\";\\r\\n\\t\\t} else if (hasRole(CS_ROLE, account)) {\\r\\n\\t\\t\\treturn \\\"CS\\\";\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn \\\"FAN\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction grantAdminRole(address account) public onlyAdmin {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\trequire(!hasRole(ADMIN_ROLE, account), \\\"User is already an admin\\\");\\r\\n\\t\\tgrantRole(ADMIN_ROLE, account);\\r\\n\\t\\temit AdminRoleGranted(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeModeratorRole(address account) external onlyAdmin {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\trequire(hasRole(MODERATOR_ROLE, account), \\\"User is not a moderator\\\");\\r\\n\\t\\trevokeRole(MODERATOR_ROLE, account);\\r\\n\\t\\temit ModeratorRoleRevoked(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeAdminRole(address account) external onlyAdmin {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\trequire(hasRole(ADMIN_ROLE, account), \\\"User is not an Admin\\\");\\r\\n\\t\\trequire(account != owner, \\\"User is Supper Admin\\\");\\r\\n\\r\\n\\t\\trevokeRole(ADMIN_ROLE, account);\\r\\n\\t\\temit AdminRoleRevoked(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction grantCSRole(address account, uint256 clubId) external onlyAdminOrModerator {\\r\\n\\t\\trequire(account != address(0), \\\"Invalid account address\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!hasRole(CS_ROLE, account),\\r\\n\\t\\t\\t\\\"User is already a Community Steward for this club\\\"\\r\\n\\t\\t);\\r\\n\\t\\tgrantRole(CS_ROLE, account);\\r\\n\\t\\tclubIdToCs[clubId] = account;\\r\\n\\t\\temit CSRoleGranted(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeCSRole(address account) external onlyAdminOrModerator {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(CS_ROLE, account),\\r\\n\\t\\t\\t\\\"User does not have a CS role for this club\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\trevokeRole(CS_ROLE, account);\\r\\n\\t\\temit CSRoleRevoked(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isCSOn(address account, uint256 clubId) external view returns (bool) {\\r\\n\\t\\treturn hasRole(CS_ROLE, account) && clubIdToCs[clubId] == address(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAdminOrModerator(address account) external view returns (bool) {\\r\\n\\t\\treturn hasRole(ADMIN_ROLE, account) || hasRole(MODERATOR_ROLE, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getModerators(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\treturn getMembers(page, pageSize, MODERATOR_ROLE);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAdmins(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\treturn getMembers(page, pageSize, ADMIN_ROLE);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCSs(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\treturn getMembers(page, pageSize, CS_ROLE);\\r\\n\\t}\\r\\n\\r\\n  function getAdminsCount() public view returns (uint256) {\\r\\n    return getRoleMemberCount(ADMIN_ROLE);\\r\\n  }\\r\\n\\r\\n  function getModeratorsCount() public view returns (uint256) {\\r\\n    return getRoleMemberCount(MODERATOR_ROLE);\\r\\n  }\\r\\n\\r\\n\\tfunction getPageCursor(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize,\\r\\n\\t\\tbytes32 role\\r\\n\\t) private view returns (uint256, uint256) {\\r\\n\\t\\tuint256 length = getRoleMemberCount(role);\\r\\n\\t\\tif (length == 0) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 totalPages = length / pageSize;\\r\\n\\t\\tif (length % pageSize != 0) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++totalPages;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (page > totalPages) {\\r\\n\\t\\t\\treturn (0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 startItemIndex;\\r\\n\\t\\tuint256 endItemIndex;\\r\\n\\r\\n\\t\\tif (((page - 1) * pageSize) < length) {\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\tstartItemIndex = length - ((page - 1) * pageSize);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstartItemIndex = length;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (startItemIndex > pageSize) {\\r\\n\\t\\t\\tendItemIndex = startItemIndex - pageSize;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (startItemIndex, endItemIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMembers(\\r\\n\\t\\tuint256 page,\\r\\n\\t\\tuint256 pageSize,\\r\\n\\t\\tbytes32 role\\r\\n\\t) private view returns (address[] memory) {\\r\\n    require(pageSize > 0 && pageSize <= 100, \\\"Invalid page size number!\\\");\\r\\n\\t\\trequire(page > 0, \\\"Invalid page number!\\\");\\r\\n\\t\\t(uint256 startItemIndex, uint256 endItemIndex) = getPageCursor(\\r\\n\\t\\t\\tpage,\\r\\n\\t\\t\\tpageSize,\\r\\n\\t\\t\\trole\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 count = startItemIndex - endItemIndex;\\r\\n\\r\\n\\t\\tif (count < 1) {\\r\\n\\t\\t\\treturn new address[](0);\\r\\n\\t\\t}\\r\\n\\t\\taddress[] memory members = new address[](count);\\r\\n\\r\\n\\t\\tuint256 j = count - 1;\\r\\n\\t\\tfor (uint256 i = endItemIndex; i < startItemIndex; ) {\\r\\n\\t\\t\\tmembers[j] = getRoleMember(role, i);\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t--j;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn members;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isStaff(address account) external view returns (bool) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\thasRole(ADMIN_ROLE, account) ||\\r\\n\\t\\t\\thasRole(MODERATOR_ROLE, account) ||\\r\\n\\t\\t\\thasRole(CS_ROLE, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isCS(address account) external view returns (bool) {\\r\\n\\t\\treturn hasRole(CS_ROLE, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isModerator(address account) external view returns (bool) {\\r\\n\\t\\treturn hasRole(MODERATOR_ROLE, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAdmin(address account) external view returns (bool) {\\r\\n\\t\\treturn hasRole(ADMIN_ROLE, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isFan(address account) external view returns (bool) {\\r\\n\\t\\treturn hasRole(FAN_ROLE, account);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7136ddd9d87d517ff27aa2e405ee56a14715f1d273dc367addf383b1884306f6\",\"license\":\"MIT\"},\"contracts/membership/MemberManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./MemberRecord.sol\\\";\\r\\n\\r\\nlibrary MemberManager {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\r\\n\\tstruct MemberData {\\r\\n\\t\\tmapping(uint256 => mapping(uint256 => MemberRecord)) members;\\r\\n\\t\\tmapping(address => mapping(uint256 => uint256)) indexByAddress;\\r\\n\\t\\tmapping(uint256 => uint256) indexOf;\\r\\n\\t\\tmapping(uint256 => Counters.Counter) memberIds;\\r\\n\\t\\tmapping(uint256 => uint256[]) keys;\\r\\n\\t}\\r\\n\\r\\n\\tfunction current(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (uint256) {\\r\\n\\t\\treturn data.keys[clubId].length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction grantMembership(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tdata.indexByAddress[user][clubId] == 0,\\r\\n\\t\\t\\t\\\"Membership request already submitted\\\"\\r\\n\\t\\t);\\r\\n\\t\\tdata.memberIds[clubId].increment();\\r\\n\\t\\tuint256 memberId = data.memberIds[clubId].current();\\r\\n\\r\\n    data.indexOf[memberId] = data.keys[clubId].length;\\r\\n\\t\\tdata.keys[clubId].push(memberId);\\r\\n\\t\\tdata.indexByAddress[user][clubId] = memberId;\\r\\n\\t\\tdata.members[clubId][memberId] = MemberRecord(user, block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeMembership(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal {\\r\\n\\t\\tuint256 memberId = data.indexByAddress[user][clubId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmemberId != 0,\\r\\n\\t\\t\\t\\\"Membership has not requested\\\"\\r\\n\\t\\t);\\r\\n\\t\\tdelete data.members[clubId][memberId];\\r\\n\\t\\tdelete data.indexByAddress[user][clubId];\\r\\n\\r\\n\\t\\tuint256 index = data.indexOf[memberId];\\r\\n\\t\\tuint256 lastKey = data.keys[clubId][data.keys[clubId].length - 1];\\r\\n\\r\\n\\t\\tdata.indexOf[lastKey] = index;\\r\\n\\t\\tdelete data.indexOf[memberId];\\r\\n\\r\\n\\t\\tdata.keys[clubId][index] = lastKey;\\r\\n\\t\\tdata.keys[clubId].pop();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMember(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (MemberRecord memory) {\\r\\n\\t\\tuint256 memberId = data.indexByAddress[user][clubId];\\r\\n\\t\\treturn data.members[clubId][memberId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMemberByIndex(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\tuint256 index,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (MemberRecord memory) {\\r\\n\\t\\tuint256 memberId = data.keys[clubId][index];\\r\\n\\t\\treturn data.members[clubId][memberId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction isMember(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (bool) {\\r\\n\\t\\treturn data.indexByAddress[user][clubId] != 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMemberID(\\r\\n\\t\\tMemberData storage data,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 clubId\\r\\n\\t) internal view returns (uint256) {\\r\\n\\t\\treturn data.indexByAddress[user][clubId];\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd5a49c3f11a48ac7b668a17fdf7edf61a6fe88c612260f4bf60047d657024302\",\"license\":\"MIT\"},\"contracts/membership/MemberRecord.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct MemberRecord {\\r\\n  address member;\\r\\n  uint256 ceatedAt;\\r\\n}\",\"keccak256\":\"0x0106c1022c96a5eacb91139378bed9ff52045a1317003e8f32a9d54632f876c5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80636c684391116100665780636c6843911461013857806388eeafac1461014b5780638a6655d61461015e578063968541341461017157806397decb3f146101a657600080fd5b80631404f2d1146100a35780632a2eaf31146100b85780634936c0f6146100e15780635767f36b14610102578063644f12f014610115575b600080fd5b6100b66100b13660046123da565b6101c6565b005b6100cb6100c63660046124f0565b6104c9565b6040516100d891906126a5565b60405180910390f35b6100f46100ef366004612707565b610abb565b6040519081526020016100d8565b6100b66101103660046124f0565b610ad1565b610128610123366004612720565b610d95565b60405190151581526020016100d8565b6100b6610146366004612761565b6111c8565b6100b6610159366004612793565b6114d3565b6100b661016c3660046124f0565b6117df565b61012861017f366004612793565b33600090815260208181526040808320938352928152828220938252929092529020541590565b6101b96101b4366004612793565b611d5c565b6040516100d891906127b5565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016635ae4223d336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561023a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025e91906127c8565b6102835760405162461bcd60e51b815260040161027a906127ea565b60405180910390fd5b604051631f88323f60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c91906127c8565b6103285760405162461bcd60e51b815260040161027a90612831565b6001815111801561033b5750600a815111155b6103875760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206e756d626572206f662063686f6963657300000000000000604482015260640161027a565b600084815260026020908152604080832080546001808201909255818452828520818652909352922080546001600160a01b03191633178155909181016103ce86826128e3565b50600281016103dd85826128e3565b5060048101805460ff1916600117905560005b83518110156104765781600301604051806040016040528086848151811061041a5761041a6129a3565b6020908102919091018101518252600091810182905283546001810185559382529020815191926002020190819061045290826128e3565b50602091909101516001918201805460ff191660ff909216919091179055016103f0565b50805460408051848152602081018990526001600160a01b0390921682820152517f2e8c120bfdd294891f6ac45b1d661997690ad24bb51f51e4d357365f25c190239181900360600190a1505050505050565b60606000821180156104dc575060648211155b6105285760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420706167652073697a65206e756d6265722100000000000000604482015260640161027a565b6000831161056f5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642070616765206e756d6265722160601b604482015260640161027a565b604051631f88323f60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f891906127c8565b6106145760405162461bcd60e51b815260040161027a90612831565b6000806106228585886121d3565b9092509050600061063382846129cf565b9050600181101561067a57604080516000808252602082019092529061066f565b61065c6122c4565b8152602001906001900390816106545790505b509350505050610ab4565b60008167ffffffffffffffff81111561069557610695612323565b6040519080825280602002602001820160405280156106ce57816020015b6106bb6122c4565b8152602001906001900390816106b35790505b50905060006106de6001846129cf565b9050835b85811015610aab5760008a81526001602081815260408084208585528252808420815160e0810190925280546001600160a01b03168252928301805491939284019161072d9061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546107599061285a565b80156107a65780601f1061077b576101008083540402835291602001916107a6565b820191906000526020600020905b81548152906001019060200180831161078957829003601f168201915b505050505081526020016002820180546107bf9061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546107eb9061285a565b80156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561093757838290600052602060002090600202016040518060400160405290816000820180546108999061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546108c59061285a565b80156109125780601f106108e757610100808354040283529160200191610912565b820191906000526020600020905b8154815290600101906020018083116108f557829003601f168201915b505050918352505060019182015460ff16602091820152918352929092019101610866565b5050509082525060048281015460209092019160ff169081111561095d5761095d6125d3565b600481111561096e5761096e6125d3565b815260058201546020820152600690910154604090910152608081015160a0820151919250904210156109a357506000610a11565b8160a0015142101580156109ba57508160c0015142105b80156109d7575060018160048111156109d5576109d56125d3565b145b156109e457506002610a11565b8160c0015142118015610a0857506002816004811115610a0657610a066125d3565b145b15610a11575060035b60405180610100016040528084815260200183600001516001600160a01b03168152602001836020015181526020018360400151815260200183606001518152602001826004811115610a6657610a666125d3565b81526020018360a0015181526020018360c00151815250858581518110610a8f57610a8f6129a3565b60209081029190910101525050600019909101906001016106e2565b50909450505050505b9392505050565b6000818152600260205260408120545b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016635ae4223d336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6991906127c8565b610b855760405162461bcd60e51b815260040161027a906127ea565b6101f48111610bd65760405162461bcd60e51b815260206004820152601960248201527f4475726174696f6e206d75737420626520706f73697469766500000000000000604482015260640161027a565b604051631f88323f60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906127c8565b610c7b5760405162461bcd60e51b815260040161027a90612831565b600082815260026020526040902054831115610ca95760405162461bcd60e51b815260040161027a906129e2565b60008281526001602081815260408084208785529091529091209060048083015460ff1690811115610cdd57610cdd6125d3565b14610d2a5760405162461bcd60e51b815260206004820152601d60248201527f50726f706f73616c206e6f7420696e2070656e64696e67207374617465000000604482015260640161027a565b60048101805460ff191660021790554260058201819055828101600683018190556040805187815260208101939093528201819052907f79f4674ed037bbb3d5409860f08f43169a7aab59581ca8d1f2f97578dc944b91906060015b60405180910390a15050505050565b604051631f88323f60e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906127c8565b610e3d5760405162461bcd60e51b815260040161027a90612831565b600082815260026020526040902054831115610e6b5760405162461bcd60e51b815260040161027a906129e2565b60008281526001602081815260408084208785528252808420815160e0810190925280546001600160a01b031682529283018054919392840191610eae9061285a565b80601f0160208091040260200160405190810160405280929190818152602001828054610eda9061285a565b8015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b50505050508152602001600282018054610f409061285a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6c9061285a565b8015610fb95780601f10610f8e57610100808354040283529160200191610fb9565b820191906000526020600020905b815481529060010190602001808311610f9c57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156110b8578382906000526020600020906002020160405180604001604052908160008201805461101a9061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546110469061285a565b80156110935780601f1061106857610100808354040283529160200191611093565b820191906000526020600020905b81548152906001019060200180831161107657829003601f168201915b505050918352505060019182015460ff16602091820152918352929092019101610fe7565b5050509082525060048281015460209092019160ff16908111156110de576110de6125d3565b60048111156110ef576110ef6125d3565b815260200160058201548152602001600682015481525050905061111281612288565b61112e5760405162461bcd60e51b815260040161027a90612a0f565b6040516385752d0360e01b81526001600160a01b038681166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016906385752d0390604401602060405180830381865afa15801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf91906127c8565b95945050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016635ae4223d336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906127c8565b61127c5760405162461bcd60e51b815260040161027a906127ea565b604051631f88323f60e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130591906127c8565b6113215760405162461bcd60e51b815260040161027a90612831565b600083815260026020526040902054841061134e5760405162461bcd60e51b815260040161027a906129e2565b4282101561139e5760405162461bcd60e51b815260206004820181905260248201527f53746172742074696d65206d75737420626520696e2074686520667574757265604482015260640161027a565b8181116113f75760405162461bcd60e51b815260206004820152602160248201527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b606482015260840161027a565b60008381526001602081815260408084208885529091529091209060048083015460ff169081111561142b5761142b6125d3565b146114785760405162461bcd60e51b815260206004820152601d60248201527f50726f706f73616c206e6f7420696e2070656e64696e67207374617465000000604482015260640161027a565b60048101805460ff19166002179055600581018390556006810182905560408051868152602081018590529081018390527f79f4674ed037bbb3d5409860f08f43169a7aab59581ca8d1f2f97578dc944b9190606001610d86565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016635ae4223d336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b91906127c8565b6115875760405162461bcd60e51b815260040161027a906127ea565b604051631f88323f60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161091906127c8565b61162c5760405162461bcd60e51b815260040161027a90612831565b60008181526002602052604090205482106116595760405162461bcd60e51b815260040161027a906129e2565b60008181526001602090815260408083208584529091529020600260048083015460ff169081111561168d5761168d6125d3565b146116da5760405162461bcd60e51b815260206004820152601c60248201527f50726f706f73616c206e6f7420696e20766f74696e6720737461746500000000604482015260640161027a565b600060015b600383015481101561175957826003018281548110611700576117006129a3565b600091825260209091206001600290920201015460038401805460ff9092169183908110611730576117306129a3565b600091825260209091206001600290920201015460ff161115611751578091505b6001016116df565b506000811161176957600461176c565b60035b8260040160006101000a81548160ff02191690836004811115611791576117916125d3565b021790555060048201546040517fcb78e4ccc2345df65b108430adb94a39693defb0cf1a0954629912a60d29c323916117d191879160ff16904290612a51565b60405180910390a150505050565b604051631f88323f60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186891906127c8565b6118845760405162461bcd60e51b815260040161027a90612831565b60008281526002602052604090205483106118b15760405162461bcd60e51b815260040161027a906129e2565b6000828152600160208181526040808420878552825292839020835160e0810190945280546001600160a01b0316845291820180549293611b5b9390928592908401916118fd9061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546119299061285a565b80156119765780601f1061194b57610100808354040283529160200191611976565b820191906000526020600020905b81548152906001019060200180831161195957829003601f168201915b5050505050815260200160028201805461198f9061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546119bb9061285a565b8015611a085780601f106119dd57610100808354040283529160200191611a08565b820191906000526020600020905b8154815290600101906020018083116119eb57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015611b075783829060005260206000209060020201604051806040016040529081600082018054611a699061285a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a959061285a565b8015611ae25780601f10611ab757610100808354040283529160200191611ae2565b820191906000526020600020905b815481529060010190602001808311611ac557829003601f168201915b505050918352505060019182015460ff16602091820152918352929092019101611a36565b5050509082525060048281015460209092019160ff1690811115611b2d57611b2d6125d3565b6004811115611b3e57611b3e6125d3565b815260200160058201548152602001600682015481525050612288565b611b775760405162461bcd60e51b815260040161027a90612a0f565b6040516385752d0360e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906385752d0390604401602060405180830381865afa158015611be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0691906127c8565b611c525760405162461bcd60e51b815260206004820152601960248201527f4e6f742061206d656d626572206f66207468697320636c756200000000000000604482015260640161027a565b33600090815260208181526040808320868452825280832087845290915290205415611cc05760405162461bcd60e51b815260206004820152601e60248201527f416c726561647920766f746564206f6e20746869732070726f706f73616c0000604482015260640161027a565b806003018281548110611cd557611cd56129a3565b600091825260208083206002929092029091016001908101805460ff19811660ff9182169093011691909117905533808352828252604080842087855283528084208885528352928390204290558251878152918201529081018390527f1abe610cf2bf87e57dcc1181fcf5ac0934e843d8344ab9eed6e86c799f62585e906060016117d1565b611d646122c4565b604051631f88323f60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fc4191f890602401602060405180830381865afa158015611dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ded91906127c8565b611e095760405162461bcd60e51b815260040161027a90612831565b6000828152600260205260409020548310611e365760405162461bcd60e51b815260040161027a906129e2565b60008281526001602081815260408084208785528252808420815160e0810190925280546001600160a01b031682529283018054919392840191611e799061285a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea59061285a565b8015611ef25780601f10611ec757610100808354040283529160200191611ef2565b820191906000526020600020905b815481529060010190602001808311611ed557829003601f168201915b50505050508152602001600282018054611f0b9061285a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f379061285a565b8015611f845780601f10611f5957610100808354040283529160200191611f84565b820191906000526020600020905b815481529060010190602001808311611f6757829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156120835783829060005260206000209060020201604051806040016040529081600082018054611fe59061285a565b80601f01602080910402602001604051908101604052809291908181526020018280546120119061285a565b801561205e5780601f106120335761010080835404028352916020019161205e565b820191906000526020600020905b81548152906001019060200180831161204157829003601f168201915b505050918352505060019182015460ff16602091820152918352929092019101611fb2565b5050509082525060048281015460209092019160ff16908111156120a9576120a96125d3565b60048111156120ba576120ba6125d3565b815260058201546020820152600690910154604090910152608081015160a0820151919250904210156120ef5750600061215d565b8160a00151421015801561210657508160c0015142105b801561212357506001816004811115612121576121216125d3565b145b156121305750600261215d565b8160c001514211801561215457506002816004811115612152576121526125d3565b145b1561215d575060035b60405180610100016040528086815260200183600001516001600160a01b031681526020018360200151815260200183604001518152602001836060015181526020018260048111156121b2576121b26125d3565b81526020018360a0015181526020018360c001518152509250505092915050565b6000818152600260205260408120548190806000036121f9576000809250925050612280565b60006122058683612a89565b90506122118683612a9d565b1561221a576001015b8087111561223057600080935093505050612280565b600080838861224060018c6129cf565b61224a9190612ab1565b101561225f578760018a030284039150612263565b8391505b878211156122785761227588836129cf565b90505b909450925050505b935093915050565b60006002826080015160048111156122a2576122a26125d3565b1480156122b357508160a001514210155b8015610acb57505060c00151421090565b6040518061010001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081526020016000600481111561230f5761230f6125d3565b815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561236257612362612323565b604052919050565b600082601f83011261237b57600080fd5b813567ffffffffffffffff81111561239557612395612323565b6123a8601f8201601f1916602001612339565b8181528460208386010111156123bd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156123f057600080fd5b8435935060208086013567ffffffffffffffff8082111561241057600080fd5b61241c89838a0161236a565b9550604088013591508082111561243257600080fd5b61243e89838a0161236a565b9450606088013591508082111561245457600080fd5b818801915088601f83011261246857600080fd5b81358181111561247a5761247a612323565b8060051b612489858201612339565b918252838101850191858101908c8411156124a357600080fd5b86860192505b838310156124df578235858111156124c15760008081fd5b6124cf8e89838a010161236a565b83525091860191908601906124a9565b999c989b5096995050505050505050565b60008060006060848603121561250557600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b8181101561254257602081850181015186830182015201612526565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b848110156125c657601f198684030189528151604081518186526125a58287018261251c565b9287015160ff1695870195909552509884019892509083019060010161257f565b5090979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6005811061260757634e487b7160e01b600052602160045260246000fd5b9052565b60006101008251845260018060a01b036020840151166020850152604083015181604086015261263d8286018261251c565b91505060608301518482036060860152612657828261251c565b915050608083015184820360808601526126718282612562565b91505060a083015161268660a08601826125e9565b5060c083015160c085015260e083015160e08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156126fa57603f198886030184526126e885835161260b565b945092850192908501906001016126cc565b5092979650505050505050565b60006020828403121561271957600080fd5b5035919050565b60008060006060848603121561273557600080fd5b83356001600160a01b038116811461274c57600080fd5b95602085013595506040909401359392505050565b6000806000806080858703121561277757600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156127a657600080fd5b50508035926020909101359150565b602081526000610ab4602083018461260b565b6000602082840312156127da57600080fd5b81518015158114610ab457600080fd5b60208082526027908201527f526f6c65733a2063616c6c6572206973206e6f742061646d696e206f72206d6f6040820152663232b930ba37b960c91b606082015260800190565b6020808252600f908201526e125b9d985b1a590818db1d58881251608a1b604082015260600190565b600181811c9082168061286e57607f821691505b60208210810361288e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156128de57600081815260208120601f850160051c810160208610156128bb5750805b601f850160051c820191505b818110156128da578281556001016128c7565b5050505b505050565b815167ffffffffffffffff8111156128fd576128fd612323565b6129118161290b845461285a565b84612894565b602080601f831160018114612946576000841561292e5750858301515b600019600386901b1c1916600185901b1785556128da565b600085815260208120601f198616915b8281101561297557888601518255948401946001909101908401612956565b50858210156129935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610acb57610acb6129b9565b602080825260139082015272125b9d985b1a59081c1c9bdc1bdcd85b081251606a1b604082015260600190565b60208082526022908201527f50726f706f73616c206973206e6f742061637469766520666f7220766f74696e604082015261672160f01b606082015260800190565b83815260608101612a6560208301856125e9565b826040830152949350505050565b634e487b7160e01b600052601260045260246000fd5b600082612a9857612a98612a73565b500490565b600082612aac57612aac612a73565b500690565b8082028115828204841417610acb57610acb6129b956fea2646970667358221220f471d1d0970cb2ad1d2eeed5ce3d2dbaf5b8e732bd7997e6dfbb70bf7422df4664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4106,
        "contract": "contracts/Proposal.sol:Proposal",
        "label": "hasVoted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 4113,
        "contract": "contracts/Proposal.sol:Proposal",
        "label": "_proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalRecord)4078_storage))"
      },
      {
        "astId": 4118,
        "contract": "contracts/Proposal.sol:Proposal",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Counter)574_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Choice)4060_storage)dyn_storage": {
        "base": "t_struct(Choice)4060_storage",
        "encoding": "dynamic_array",
        "label": "struct Proposal.Choice[]",
        "numberOfBytes": "32"
      },
      "t_enum(Status)4051": {
        "encoding": "inplace",
        "label": "enum Proposal.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalRecord)4078_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Proposal.ProposalRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalRecord)4078_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Counter)574_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)574_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalRecord)4078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposal.ProposalRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalRecord)4078_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Choice)4060_storage": {
        "encoding": "inplace",
        "label": "struct Proposal.Choice",
        "members": [
          {
            "astId": 4057,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4059,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)574_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 573,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProposalRecord)4078_storage": {
        "encoding": "inplace",
        "label": "struct Proposal.ProposalRecord",
        "members": [
          {
            "astId": 4062,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4064,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4066,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4070,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "choices",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Choice)4060_storage)dyn_storage"
          },
          {
            "astId": 4073,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Status)4051"
          },
          {
            "astId": 4075,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "votingStartTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4077,
            "contract": "contracts/Proposal.sol:Proposal",
            "label": "votingEndTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}